apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vault
  namespace: argocd
spec:
  project: default
  sources:
    - chart: vault
      repoURL: https://helm.releases.hashicorp.com
      targetRevision: v0.28.1 # Replace with the Vault version you'd like to install or upgrade to
      helm:
        values: |
          serverTelemetry:
            # Enable integration with the Prometheus Operator
            # See the top level serverTelemetry section below before enabling this feature.
            prometheusOperator: false
            ingress:
              enabled: true
              labels: {}
              # traffic: external
              annotations: {}
              # |
              # kubernetes.io/ingress.class: nginx
              # kubernetes.io/tls-acme: "true"
              #   or
              # kubernetes.io/ingress.class: nginx
              # kubernetes.io/tls-acme: "true"

              # Optionally use ingressClassName instead of deprecated annotation.
              # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation
              ingressClassName: ""

              # As of Kubernetes 1.19, all Ingress Paths must have a pathType configured. The default value below should be sufficient in most cases.
              # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types for other possible values.
              pathType: Prefix

              # When HA mode is enabled and K8s service registration is being used,
              # configure the ingress to point to the Vault active service.
              activeService: true
              hosts:
              - host: vault.yannikmueller.eu
                  paths: []
              ## Extra paths to prepend to the host configuration. This is useful when working with annotation based services.
              extraPaths: []
              # - path: /*
              #   backend:
              #     service:
              #       name: ssl-redirect
              #       port:
              #         number: use-annotation
              tls: []
              #  - secretName: chart-example-tls
              #    hosts:
              #      - chart-example.local
               # This configures the Vault Statefulset to create a PVC for data
            # storage when using the file or raft backend storage engines.
            # See https://developer.hashicorp.com/vault/docs/configuration/storage to know more
            dataStorage:
              enabled: true
              # Size of the PVC created
              size: 2Gi
              # Location where the PVC will be mounted.
              mountPath: "/vault/data"
              # Name of the storage class to use.  If null it will use the
              # configured default Storage Class.
              storageClass: longhorn
              # Access Mode of the storage device being used for the PVC
              accessMode: ReadWriteOnce
              # Annotations to apply to the PVC
              annotations: {}
              # Labels to apply to the PVC
              labels: {}
            standalone:
              enabled: false
            ha:
              enabled: true
              raft:
                enabled: true
            ui:
              enabled: true

  destination:
    server: https://kubernetes.default.svc
    namespace: longhorn-system
  syncPolicy:
    automated:
      prune: true
    syncOptions:
      - CreateNamespace=true
